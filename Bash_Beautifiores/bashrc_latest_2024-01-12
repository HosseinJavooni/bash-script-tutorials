# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc
#======================================
export PATH=$PATH:/home/hossein/bash-script-tutorials
export JAVA_HOME=/opt/jdk-17.0.2
export PATH=$JAVA_HOME/bin:$PATH
#============MY_BASH_THEME_V2=============
BOLD="\033[1m"
END="\033[0m"
BLACK_B="\033[48;2;0;0;0m"
BLACK_F="\033[38;2;0;0;0m"
B_D="\033[48;2;96;124;235m"
F_D="\033[38;2;96;124;235m"
B_H="\033[48;2;37;156;26m"
F_H="\033[38;2;37;156;26m"
B_U="\033[48;2;252;223;3m"
F_U="\033[38;2;252;223;3m"
F_GIT_1="\033[38;2;207;9;2m"
B_GIT_1="\033[48;2;207;9;2m"
F_GIT_2="\033[38;2;217;148;0m"
B_GIT_2="\033[48;2;217;148;0m"
F_GIT_3="\033[38;2;12;125;1m"
B_GIT_3="\033[48;2;12;125;1m"
YELLOW_ARROW="\033[38;2;252;252;3m"
#---------------------------------
arrow_left_unstage() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && ($result == *"Untracked files:"* || $result == *"Changes not staged for commit:"*) ]]; then
     echo "$(echo -e '\uE0B2')"
  else
     echo ""
  fi
}

parse_git_branch_unstage() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && ($result == *"Untracked files:"* || $result == *"Changes not staged for commit:"*) ]]; then
     echo "$(echo -e '\uE0A0') $(git branch --show-current)"
  else
     echo ""
  fi
}
arrow_right_unstage() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && ($result == *"Untracked files:"* || $result == *"Changes not staged for commit:"*) ]]; then
     echo "$(echo -e '\uE0B0')"
  else
     echo ""
  fi
}
arrow_left_staged() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result != *"Untracked files:"* && $result != *"Changes not staged for commit:"* && $result == *"Changes to be committed:"* ]]; then
     echo "$(echo -e '\uE0B2')"
  else
     echo ""
  fi
}
parse_git_branch_staged() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result != *"Untracked files:"* && $result != *"Changes not staged for commit:"* && $result == *"Changes to be committed:"* ]]; then
     echo "$(echo -e '\uE0A0') $(git branch --show-current)"
  else
     echo ""
  fi
}
arrow_right_staged() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result != *"Untracked files:"* && $result != *"Changes not staged for commit:"* && $result == *"Changes to be committed:"* ]]; then
     echo "$(echo -e '\uE0B0')"
  else
     echo ""
  fi
}
arrow_left_committed() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result == *"nothing to commit, working tree clean"* ]]; then
     echo "$(echo -e '\uE0B2')"
  else
     echo ""
  fi
}
parse_git_branch_committed() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result == *"nothing to commit, working tree clean"* ]]; then
     echo "$(echo -e '\uE0A0') $(git branch --show-current)"
  else
     echo ""
  fi
}
arrow_right_committed() {
  result=$(git status 2> /dev/null)
  if [[ $? = 0 && $result == *"nothing to commit, working tree clean"* ]]; then
     echo "$(echo -e '\uE0B0')"
  else
     echo ""
  fi
}
#---------------------------------
#---------------------------------
PS1="\[\033[33m\]╭─"
PS1+="$(echo -e '\uE0B2')"
PS1+="\[\033[43m\]"
PS1+="\[\033[30m\]\u"
PS1+="\[\033[42m\]"
PS1+="\[\033[33m\]"
PS1+="$(echo -e '\uE0B0')"
PS1+="\[\033[30m\]"
PS1+="\h"
PS1+="\[\033[44m\]"
PS1+="\[\033[32m\]"
PS1+="$(echo -e '\uE0B0')"
PS1+="\[\033[30m\]"
PS1+=" ${PWD}"
#PS1+="${F_D}"
#PS1+="$(echo '\uE0B0')"
#PS1+="${END}"
#PS1+="\n${F_U}${BOLD}╰❯${END}${F_GIT_1}$(echo -e '\uE0B0')${END}"

PS1+="\n\[\033[33m\]\[\033[40m\]╰❯"

PS1+="\[\033[31m\]\$(arrow_left_unstage)"
PS1+="\[\033[41m\]\[\033[37m\]\$(parse_git_branch_unstage)"
PS1+="\[\033[31m\]\[\033[40m\]\$(arrow_right_unstage)"

PS1+="\[\033[33m\]\$(arrow_left_staged)"
PS1+="\[\033[43m\]\[\033[37m\]\$(parse_git_branch_staged)"
PS1+="\[\033[33m\]\[\033[40m\]\$(arrow_right_staged)"

PS1+="\[\033[32m\]\$(arrow_left_committed)"
PS1+="\[\033[42m\]\[\033[37m\]\$(parse_git_branch_committed)"
PS1+="\[\033[32m\]\[\033[40m\]\$(arrow_right_committed)"
#echo -e ${PS1}

